Chapter 2.  Forces
------------------

{drag2}

[source,java]
----
float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);
----

[source,java]
----
float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);
----

[source,java]
----
float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);
----

[source,java]
----
float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);
----

[source,java]
----
float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);
----

[source,java]
----
float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);
----

[source,java]
----
float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);

float m = (G * mass1 * mass2) / (distance * distance);
dir.mult(m);
----



